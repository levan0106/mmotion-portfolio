name: Deploy Portfolio Application

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ master, main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
        - staging
        - production
      deploy_backend:
        description: 'Deploy Backend Services'
        required: true
        default: true
        type: boolean
      deploy_frontend:
        description: 'Deploy Frontend Services'
        required: true
        default: true
        type: boolean

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY_BACKEND: portfolio-backend
  ECR_REPOSITORY_FRONTEND: portfolio-frontend

jobs:
  build-and-push-backend:
    runs-on: ubuntu-latest
    if: (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch') && (github.event.inputs.deploy_backend == 'true' || github.event.inputs.deploy_backend == null)
    outputs:
      image-tag: ${{ steps.build.outputs.image-tag }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push backend image
      id: build
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build backend image
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:$IMAGE_TAG .
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:latest .
        
        # Push backend images
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:latest
        
        echo "image-tag=$IMAGE_TAG" >> $GITHUB_OUTPUT

  build-and-push-frontend:
    runs-on: ubuntu-latest
    if: (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch') && (github.event.inputs.deploy_frontend == 'true' || github.event.inputs.deploy_frontend == null)
    outputs:
      image-tag: ${{ steps.build.outputs.image-tag }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push frontend image
      id: build
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build frontend image
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:$IMAGE_TAG ./frontend
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:latest ./frontend
        
        # Push frontend images
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:latest
        
        echo "image-tag=$IMAGE_TAG" >> $GITHUB_OUTPUT

  deploy-backend:
    needs: build-and-push-backend
    runs-on: ubuntu-latest
    if: (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch') && (github.event.inputs.deploy_backend == 'true' || github.event.inputs.deploy_backend == null)
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Upload backend deployment files to EC2
      uses: appleboy/scp-action@v0.1.4
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_SSH_KEY }}
        source: "docker-compose.backend.yml,production.env,scripts/smart-migration.sh,scripts/fix-production-database.sh"
        target: "/home/${{ secrets.EC2_USER }}/mmotion-portfolio/"

    - name: Deploy Backend to EC2
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          # Update environment variables
          export ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}
          export ECR_REPOSITORY_BACKEND=${{ env.ECR_REPOSITORY_BACKEND }}
          export IMAGE_TAG=${{ github.sha }}
          
          # Test ECR access first
          echo "üîê Testing ECR access..."
          aws sts get-caller-identity
          
          # Login to ECR with retry
          echo "üîë Logging into ECR..."
          for i in {1..3}; do
            if aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin $ECR_REGISTRY; then
              echo "‚úÖ ECR login successful"
              break
            else
              echo "‚ùå ECR login attempt $i failed, retrying..."
              sleep 5
            fi
          done
          
          # Pull latest backend image with retry
          echo "üì• Pulling backend image..."
          for i in {1..3}; do
            if docker pull $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:latest; then
              echo "‚úÖ Backend image pulled successfully"
              break
            else
              echo "‚ùå Backend image pull attempt $i failed, retrying..."
              sleep 10
            fi
          done
          
          # Ensure project directory exists
          echo "üìÅ Setting up project directory..."
          mkdir -p /home/${{ secrets.EC2_USER }}/mmotion-portfolio
          cd /home/${{ secrets.EC2_USER }}/mmotion-portfolio
          
          # Copy production environment file
          if [ ! -f .env ]; then
            cp production.env .env
            echo "üìù Created .env file from production.env"
          fi
          
          # Stop existing backend containers
          echo "üõë Stopping existing backend containers..."
          docker-compose -f docker-compose.backend.yml down || true
          
          # Start backend services
          echo "üöÄ Starting backend services..."
          docker-compose -f docker-compose.backend.yml up -d
          
          # Wait for backend to be healthy
          echo "‚è≥ Waiting for backend to be healthy..."
          sleep 60
          
          # Run smart database migrations (only when needed)
          echo "üß† Running smart database migrations..."
          chmod +x scripts/smart-migration.sh
          chmod +x scripts/fix-production-database.sh
          ./scripts/smart-migration.sh || echo "Smart migration failed, trying fix script..." && ./scripts/fix-production-database.sh || echo "All migration attempts failed, but continuing deployment..."
          
          # Check backend health
          echo "üè• Checking backend health..."
          curl -f http://localhost:3000/health || echo "Backend health check failed"
          
          # Clean up old images
          echo "üßπ Cleaning up old images..."
          docker image prune -f

  deploy-frontend:
    needs: build-and-push-frontend
    runs-on: ubuntu-latest
    if: (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch') && (github.event.inputs.deploy_frontend == 'true' || github.event.inputs.deploy_frontend == null)
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Upload frontend deployment files to EC2
      uses: appleboy/scp-action@v0.1.4
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_SSH_KEY }}
        source: "docker-compose.frontend.yml"
        target: "/home/${{ secrets.EC2_USER }}/mmotion-portfolio/"

    - name: Deploy Frontend to EC2
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          # Update environment variables
          export ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}
          export ECR_REPOSITORY_FRONTEND=${{ env.ECR_REPOSITORY_FRONTEND }}
          export IMAGE_TAG=${{ github.sha }}
          
          # Test ECR access first
          echo "üîê Testing ECR access..."
          aws sts get-caller-identity
          
          # Login to ECR with retry
          echo "üîë Logging into ECR..."
          for i in {1..3}; do
            if aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin $ECR_REGISTRY; then
              echo "‚úÖ ECR login successful"
              break
            else
              echo "‚ùå ECR login attempt $i failed, retrying..."
              sleep 5
            fi
          done
          
          # Pull latest frontend image with retry
          echo "üì• Pulling frontend image..."
          for i in {1..3}; do
            if docker pull $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:latest; then
              echo "‚úÖ Frontend image pulled successfully"
              break
            else
              echo "‚ùå Frontend image pull attempt $i failed, retrying..."
              sleep 10
            fi
          done
          
          # Ensure project directory exists
          echo "üìÅ Setting up project directory..."
          mkdir -p /home/${{ secrets.EC2_USER }}/mmotion-portfolio
          cd /home/${{ secrets.EC2_USER }}/mmotion-portfolio
          
          # Stop existing frontend containers
          echo "üõë Stopping existing frontend containers..."
          docker-compose -f docker-compose.frontend.yml down || true
          
          # Start frontend service
          echo "üåê Starting frontend service..."
          docker-compose -f docker-compose.frontend.yml up -d
          
          # Wait for frontend to be healthy
          echo "‚è≥ Waiting for frontend to be healthy..."
          sleep 30
          
          # Check frontend health
          echo "üè• Checking frontend health..."
          curl -f http://localhost || echo "Frontend health check failed"
          
          # Clean up old images
          echo "üßπ Cleaning up old images..."
          docker image prune -f

  health-check:
    needs: [deploy-backend, deploy-frontend]
    runs-on: ubuntu-latest
    if: always() && (needs.deploy-backend.result == 'success' || needs.deploy-frontend.result == 'success')
    
    steps:
    - name: Health Check
      run: |
        sleep 30
        curl -f http://${{ secrets.EC2_HOST }}/health || echo "Health check failed"