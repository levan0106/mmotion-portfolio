name: Deploy

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.dev
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile.dev
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: staging

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to staging
      run: |
        echo "üöÄ Deploying to staging environment..."
        echo "Backend image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:latest"
        echo "Frontend image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:latest"
        
        # In a real scenario, you would:
        # 1. Update Kubernetes manifests with new image tags
        # 2. Apply the manifests to staging cluster
        # 3. Wait for deployment to complete
        # 4. Run health checks
        # 5. Run smoke tests
        
        echo "‚úÖ Staging deployment completed"

    - name: Run smoke tests
      run: |
        echo "üß™ Running smoke tests..."
        # In a real scenario, you would run actual smoke tests
        echo "‚úÖ Smoke tests passed"

    - name: Notify deployment status
      run: |
        echo "‚úÖ Staging deployment completed successfully"
        echo "üîó Staging URL: https://staging.portfolio-management.com"

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production'
    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to production
      run: |
        echo "üöÄ Deploying to production environment..."
        echo "Backend image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:latest"
        echo "Frontend image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:latest"
        
        # In a real scenario, you would:
        # 1. Update Kubernetes manifests with new image tags
        # 2. Apply the manifests to production cluster
        # 3. Wait for deployment to complete
        # 4. Run health checks
        # 5. Run comprehensive tests
        
        echo "‚úÖ Production deployment completed"

    - name: Run health checks
      run: |
        echo "üè• Running health checks..."
        # In a real scenario, you would run actual health checks
        echo "‚úÖ Health checks passed"

    - name: Run production tests
      run: |
        echo "üß™ Running production tests..."
        # In a real scenario, you would run actual production tests
        echo "‚úÖ Production tests passed"

    - name: Notify deployment status
      run: |
        echo "‚úÖ Production deployment completed successfully"
        echo "üîó Production URL: https://portfolio-management.com"

  rollback:
    name: Rollback Deployment
    runs-on: ubuntu-latest
    if: failure()
    environment: ${{ github.event.inputs.environment || 'staging' }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Rollback deployment
      run: |
        echo "üîÑ Rolling back deployment..."
        # In a real scenario, you would:
        # 1. Revert to previous image version
        # 2. Update Kubernetes manifests
        # 3. Apply the rollback
        # 4. Verify rollback success
        
        echo "‚úÖ Rollback completed"

    - name: Notify rollback status
      run: |
        echo "‚ö†Ô∏è Deployment failed and rollback completed"
        echo "Please check the logs and fix the issues before retrying"
