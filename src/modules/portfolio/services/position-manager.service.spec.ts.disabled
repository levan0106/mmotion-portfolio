import { Test, TestingModule } from '@nestjs/testing';
import { getRepositoryToken } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import { PositionManagerService } from './position-manager.service';
import { PortfolioAsset } from '../entities/portfolio-asset.entity';
import { Portfolio } from '../entities/portfolio.entity';

describe('PositionManagerService', () => {
  let service: PositionManagerService;
  let mockPortfolioAssetRepository: jest.Mocked<Repository<PortfolioAsset>>;
  let mockPortfolioRepository: jest.Mocked<Repository<Portfolio>>;

  const mockPortfolio: Portfolio = {
    portfolioId: 'portfolio-1',
    name: 'Test Portfolio',
    account_id: 'account-1',
    base_currency: 'USD',
    total_value: 10000,
    cash_balance: 5000,
    unrealized_pl: 0,
    realized_pl: 0,
    created_at: new Date('2024-01-01'),
    updated_at: new Date('2024-01-01'),
    account: null,
    navSnapshots: [],
    cashFlows: [],
    trades: [],
    portfolioAssets: [],
  };

  const mockPortfolioAsset: PortfolioAsset = {
    portfolioId: 'portfolio-1',
    assetId: 'asset-1',
    quantity: 100,
    avg_cost: 50,
    market_value: 5000,
    unrealized_pl: 500,
    updated_at: new Date('2024-01-01'),
    portfolio: mockPortfolio,
    asset: {
      id: 'asset-1',
      name: 'Test Asset',
      symbol: 'TEST',
      type: 'STOCK' as any,
      portfolioId: 'portfolio-1',
      created_at: new Date('2024-01-01'),
      updated_at: new Date('2024-01-01'),
      createdBy: 'user-1',
      updatedBy: 'user-1',
      initialValue: 1000,
      initialQuantity: 100,
      trades: [],
      portfolioAssets: [],
      getTotalValue: jest.fn().mockReturnValue(1000),
      getTotalQuantity: jest.fn().mockReturnValue(100),
      hasTrades: jest.fn().mockReturnValue(false),
      getDisplayName: jest.fn().mockReturnValue('Test Asset (TEST)'),
      toJSON: jest.fn().mockReturnValue({}),
    } as any,
  };

  beforeEach(async () => {
    const mockPortfolioAssetRepo = {
      findOne: jest.fn(),
      find: jest.fn(),
      create: jest.fn(),
      save: jest.fn(),
      remove: jest.fn(),
    };

    const mockPortfolioRepo = {
      findOne: jest.fn(),
      find: jest.fn(),
      create: jest.fn(),
      save: jest.fn(),
    };

    const module: TestingModule = await Test.createTestingModule({
      providers: [
        PositionManagerService,
        {
          provide: getRepositoryToken(PortfolioAsset),
          useValue: mockPortfolioAssetRepo,
        },
        {
          provide: getRepositoryToken(Portfolio),
          useValue: mockPortfolioRepo,
        },
      ],
    }).compile();

    service = module.get<PositionManagerService>(PositionManagerService);
    mockPortfolioAssetRepository = module.get(getRepositoryToken(PortfolioAsset));
    mockPortfolioRepository = module.get(getRepositoryToken(Portfolio));
  });

  afterEach(() => {
    jest.clearAllMocks();
  });

  describe('updatePosition', () => {
    it('should update existing position', async () => {
      const updatedAsset = { ...mockPortfolioAsset, quantity: 150, market_value: 7500 };
      
      mockPortfolioAssetRepository.findOne.mockResolvedValue(mockPortfolioAsset);
      mockPortfolioAssetRepository.save.mockResolvedValue(updatedAsset);

      const result = await service.updatePosition('portfolio-1', 'asset-1', 150, 50);

      expect(mockPortfolioAssetRepository.findOne).toHaveBeenCalledWith({
        where: { portfolioId: 'portfolio-1', assetId: 'asset-1' },
        relations: ['asset'],
      });
      expect(mockPortfolioAssetRepository.save).toHaveBeenCalledWith(updatedAsset);
      expect(result).toEqual(updatedAsset);
    });

    it('should create new position when not found', async () => {
      const newAsset = { ...mockPortfolioAsset, id: 'pa-2' };
      
      mockPortfolioAssetRepository.findOne.mockResolvedValue(null);
      mockPortfolioAssetRepository.create.mockReturnValue(newAsset);
      mockPortfolioAssetRepository.save.mockResolvedValue(newAsset);

      const result = await service.updatePosition('portfolio-1', 'asset-2', 100, 50);

      expect(mockPortfolioAssetRepository.create).toHaveBeenCalledWith({
        portfolioId: 'portfolio-1',
        assetId: 'asset-2',
        quantity: 100,
        avg_cost: 50,
        market_value: 5000,
        unrealized_pl: 0,
      });
      expect(result).toEqual(newAsset);
    });
  });

  describe('calculateUnrealizedPL', () => {
    it('should calculate unrealized P&L correctly', () => {
      const result = service.calculateUnrealizedPL(100, 50, 60);
      expect(result).toBe(1000); // (60 - 50) * 100
    });

    it('should handle negative P&L', () => {
      const result = service.calculateUnrealizedPL(100, 60, 50);
      expect(result).toBe(-1000); // (50 - 60) * 100
    });
  });

  describe('calculateRealizedPL', () => {
    it('should calculate realized P&L correctly', () => {
      const result = service.calculateRealizedPL(50, 60, 50);
      expect(result).toBe(500); // (60 - 50) * 50
    });

    it('should handle negative realized P&L', () => {
      const result = service.calculateRealizedPL(50, 40, 50);
      expect(result).toBe(-500); // (40 - 50) * 50
    });
  });

  describe('getCurrentPositions', () => {
    it('should return current positions for portfolio', async () => {
      mockPortfolioAssetRepository.find.mockResolvedValue([mockPortfolioAsset]);

      const result = await service.getCurrentPositions('portfolio-1');

      expect(mockPortfolioAssetRepository.find).toHaveBeenCalledWith({
        where: { portfolioId: 'portfolio-1' },
        relations: ['asset'],
        order: { market_value: 'DESC' },
      });
      expect(result).toEqual([mockPortfolioAsset]);
    });
  });

  describe('getPositionByAsset', () => {
    it('should return position for specific asset', async () => {
      mockPortfolioAssetRepository.findOne.mockResolvedValue(mockPortfolioAsset);

      const result = await service.getPositionByAsset('portfolio-1', 'asset-1');

      expect(mockPortfolioAssetRepository.findOne).toHaveBeenCalledWith({
        where: { portfolioId: 'portfolio-1', assetId: 'asset-1' },
        relations: ['asset'],
      });
      expect(result).toEqual(mockPortfolioAsset);
    });

    it('should return null when position not found', async () => {
      mockPortfolioAssetRepository.findOne.mockResolvedValue(null);

      const result = await service.getPositionByAsset('portfolio-1', 'nonexistent');

      expect(result).toBeNull();
    });
  });

  describe('updateAverageCost', () => {
    it('should update average cost for existing position', async () => {
      const updatedAsset = { ...mockPortfolioAsset, quantity: 150, avg_cost: 53.33 };
      
      mockPortfolioAssetRepository.findOne.mockResolvedValue(mockPortfolioAsset);
      mockPortfolioAssetRepository.save.mockResolvedValue(updatedAsset);

      const result = await service.updateAverageCost('portfolio-1', 'asset-1', 50, 60);

      expect(mockPortfolioAssetRepository.findOne).toHaveBeenCalledWith({
        where: { portfolioId: 'portfolio-1', assetId: 'asset-1' },
      });
      expect(mockPortfolioAssetRepository.save).toHaveBeenCalledWith(updatedAsset);
      expect(result).toEqual(updatedAsset);
    });

    it('should create new position when not found', async () => {
      const newAsset = { ...mockPortfolioAsset, id: 'pa-2' };
      
      mockPortfolioAssetRepository.findOne.mockResolvedValue(null);
      mockPortfolioAssetRepository.create.mockReturnValue(newAsset);
      mockPortfolioAssetRepository.save.mockResolvedValue(newAsset);

      const result = await service.updateAverageCost('portfolio-1', 'asset-2', 100, 50);

      expect(mockPortfolioAssetRepository.create).toHaveBeenCalledWith({
        portfolioId: 'portfolio-1',
        assetId: 'asset-2',
        quantity: 100,
        avg_cost: 50,
        market_value: 5000,
        unrealized_pl: 0,
      });
      expect(result).toEqual(newAsset);
    });
  });

  describe('reducePosition', () => {
    it('should reduce position quantity and return realized P&L', async () => {
      const updatedAsset = { ...mockPortfolioAsset, quantity: 50 };
      
      mockPortfolioAssetRepository.findOne.mockResolvedValue(mockPortfolioAsset);
      mockPortfolioAssetRepository.save.mockResolvedValue(updatedAsset);

      const result = await service.reducePosition('portfolio-1', 'asset-1', 50, 60);

      expect(mockPortfolioAssetRepository.findOne).toHaveBeenCalledWith({
        where: { portfolioId: 'portfolio-1', assetId: 'asset-1' },
      });
      expect(mockPortfolioAssetRepository.save).toHaveBeenCalledWith(updatedAsset);
      expect(result.position).toEqual(updatedAsset);
      expect(result.realizedPL).toBe(500); // (60 - 50) * 50
    });

    it('should remove position when quantity becomes zero', async () => {
      mockPortfolioAssetRepository.findOne.mockResolvedValue(mockPortfolioAsset);
      mockPortfolioAssetRepository.remove.mockResolvedValue(mockPortfolioAsset);

      const result = await service.reducePosition('portfolio-1', 'asset-1', 100, 60);

      expect(mockPortfolioAssetRepository.remove).toHaveBeenCalledWith(mockPortfolioAsset);
      expect(result.position).toBeNull();
      expect(result.realizedPL).toBe(1000); // (60 - 50) * 100
    });

    it('should throw error when position not found', async () => {
      mockPortfolioAssetRepository.findOne.mockResolvedValue(null);

      await expect(service.reducePosition('portfolio-1', 'nonexistent', 50, 60))
        .rejects.toThrow('Position not found');
    });

    it('should throw error when insufficient quantity', async () => {
      mockPortfolioAssetRepository.findOne.mockResolvedValue(mockPortfolioAsset);

      await expect(service.reducePosition('portfolio-1', 'asset-1', 150, 60))
        .rejects.toThrow('Insufficient quantity to sell');
    });
  });

  describe('getPositionAggregation', () => {
    it('should return position aggregation summary', async () => {
      const positions = [mockPortfolioAsset];
      
      jest.spyOn(service, 'getCurrentPositions').mockResolvedValue(positions);

      const result = await service.getPositionAggregation('portfolio-1');

      expect(result).toEqual({
        totalPositions: 1,
        totalMarketValue: 5000,
        totalUnrealizedPL: 500,
        totalCostBasis: 5000,
        positionsByType: [
          {
            assetType: 'STOCK',
            count: 1,
            marketValue: 5000,
            unrealizedPL: 500,
          },
        ],
      });
    });
  });

  describe('updateAllPositionValues', () => {
    it('should update all position values with market prices', async () => {
      const positions = [mockPortfolioAsset];
      const marketPrices = { 'asset-1': 60 };
      const updatedAsset = { ...mockPortfolioAsset, market_value: 6000, unrealized_pl: 1000 };
      
      jest.spyOn(service, 'getCurrentPositions').mockResolvedValue(positions);
      mockPortfolioAssetRepository.save.mockResolvedValue(updatedAsset);

      const result = await service.updateAllPositionValues('portfolio-1', marketPrices);

      expect(mockPortfolioAssetRepository.save).toHaveBeenCalledWith(updatedAsset);
      expect(result).toEqual([updatedAsset]);
    });
  });
});