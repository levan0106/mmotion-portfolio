import { Test, TestingModule } from '@nestjs/testing';
import { getRepositoryToken } from '@nestjs/typeorm';
import { LoggingModule } from './logging.module';
import { LoggingService } from './services/logging.service';
import { LogRepository } from './repositories/log.repository';
import { ContextManager } from './services/context-manager.service';
import { LogSanitizationService } from './services/log-sanitization.service';
import { SecurityLoggingService } from './services/security-logging.service';
import { LoggingInterceptor } from './interceptors/logging.interceptor';
import { LogController } from './controllers/log.controller';
import { ApplicationLog } from './entities/application-log.entity';
import { RequestLog } from './entities/request-log.entity';
import { BusinessEventLog } from './entities/business-event-log.entity';
import { PerformanceLog } from './entities/performance-log.entity';

describe('LoggingModule', () => {
  let module: TestingModule;

  beforeEach(async () => {
    module = await Test.createTestingModule({
      imports: [LoggingModule],
    })
      .overrideProvider(getRepositoryToken(ApplicationLog))
      .useValue({
        create: jest.fn(),
        save: jest.fn(),
        find: jest.fn(),
        findOne: jest.fn(),
        findAndCount: jest.fn(),
        createQueryBuilder: jest.fn(),
      })
      .overrideProvider(getRepositoryToken(RequestLog))
      .useValue({
        create: jest.fn(),
        save: jest.fn(),
        find: jest.fn(),
        findOne: jest.fn(),
        findAndCount: jest.fn(),
        createQueryBuilder: jest.fn(),
      })
      .overrideProvider(getRepositoryToken(BusinessEventLog))
      .useValue({
        create: jest.fn(),
        save: jest.fn(),
        find: jest.fn(),
        findOne: jest.fn(),
        findAndCount: jest.fn(),
        createQueryBuilder: jest.fn(),
      })
      .overrideProvider(getRepositoryToken(PerformanceLog))
      .useValue({
        create: jest.fn(),
        save: jest.fn(),
        find: jest.fn(),
        findOne: jest.fn(),
        findAndCount: jest.fn(),
        createQueryBuilder: jest.fn(),
      })
      .overrideProvider(LogSanitizationService)
      .useValue({
        sanitizeString: jest.fn(),
        sanitizeObject: jest.fn(),
        sanitizeContext: jest.fn(),
        isSensitiveKey: jest.fn(),
        addCustomRule: jest.fn(),
        removeCustomRule: jest.fn(),
        getConfiguration: jest.fn(),
        updateConfiguration: jest.fn(),
        testSanitization: jest.fn(),
        getSanitizationStatistics: jest.fn(),
      })
      .overrideProvider(SecurityLoggingService)
      .useValue({
        logAuthentication: jest.fn(),
        logAuthorization: jest.fn(),
        logSuspiciousActivity: jest.fn(),
        logAuditTrail: jest.fn(),
        getSecurityStatistics: jest.fn(),
        clearSecurityData: jest.fn(),
      })
      .overrideProvider(LoggingInterceptor)
      .useValue({
        intercept: jest.fn(),
        updateOptions: jest.fn(),
        getOptions: jest.fn(),
      })
      .compile();
  });

  afterEach(async () => {
    await module.close();
  });

  describe('Module Definition', () => {
    it('should be defined', () => {
      expect(module).toBeDefined();
    });

    it('should compile successfully', () => {
      expect(module).toBeInstanceOf(TestingModule);
    });
  });

  describe('Providers', () => {
    it('should provide LoggingService', () => {
      const service = module.get<LoggingService>(LoggingService);
      expect(service).toBeDefined();
      expect(service).toBeInstanceOf(LoggingService);
    });

    it('should provide LogRepository', () => {
      const repository = module.get<LogRepository>(LogRepository);
      expect(repository).toBeDefined();
      expect(repository).toBeInstanceOf(LogRepository);
    });

    it('should provide ContextManager', () => {
      const contextManager = module.get<ContextManager>(ContextManager);
      expect(contextManager).toBeDefined();
      expect(contextManager).toBeInstanceOf(ContextManager);
    });

    it('should provide LogSanitizationService', () => {
      const sanitizationService = module.get<LogSanitizationService>(LogSanitizationService);
      expect(sanitizationService).toBeDefined();
      expect(sanitizationService).toBeInstanceOf(LogSanitizationService);
    });

    it('should provide SecurityLoggingService', () => {
      const securityService = module.get<SecurityLoggingService>(SecurityLoggingService);
      expect(securityService).toBeDefined();
      expect(securityService).toBeInstanceOf(SecurityLoggingService);
    });

    it('should provide LoggingInterceptor', () => {
      const interceptor = module.get<LoggingInterceptor>(LoggingInterceptor);
      expect(interceptor).toBeDefined();
      expect(interceptor).toBeInstanceOf(LoggingInterceptor);
    });
  });

  describe('Controllers', () => {
    it('should provide LogController', () => {
      const controller = module.get<LogController>(LogController);
      expect(controller).toBeDefined();
      expect(controller).toBeInstanceOf(LogController);
    });
  });

  describe('Exports', () => {
    it('should export LoggingService', () => {
      const service = module.get<LoggingService>(LoggingService);
      expect(service).toBeDefined();
    });

    it('should export LogRepository', () => {
      const repository = module.get<LogRepository>(LogRepository);
      expect(repository).toBeDefined();
    });

    it('should export ContextManager', () => {
      const contextManager = module.get<ContextManager>(ContextManager);
      expect(contextManager).toBeDefined();
    });

    it('should export LogSanitizationService', () => {
      const sanitizationService = module.get<LogSanitizationService>(LogSanitizationService);
      expect(sanitizationService).toBeDefined();
    });

    it('should export SecurityLoggingService', () => {
      const securityService = module.get<SecurityLoggingService>(SecurityLoggingService);
      expect(securityService).toBeDefined();
    });

    it('should export LoggingInterceptor', () => {
      const interceptor = module.get<LoggingInterceptor>(LoggingInterceptor);
      expect(interceptor).toBeDefined();
    });
  });

  describe('Dependency Injection', () => {
    it('should inject LoggingService dependencies correctly', () => {
      const service = module.get<LoggingService>(LoggingService);
      expect(service).toBeDefined();
      // LoggingService should be able to access its dependencies
      expect(service['logRepository']).toBeDefined();
      expect(service['contextManager']).toBeDefined();
      expect(service['sanitizationService']).toBeDefined();
    });

    it('should inject LogRepository dependencies correctly', () => {
      const repository = module.get<LogRepository>(LogRepository);
      expect(repository).toBeDefined();
      // LogRepository should have access to TypeORM repositories
      expect(repository['applicationLogRepository']).toBeDefined();
      expect(repository['requestLogRepository']).toBeDefined();
      expect(repository['businessEventLogRepository']).toBeDefined();
      expect(repository['performanceLogRepository']).toBeDefined();
    });

    it('should inject LoggingInterceptor dependencies correctly', () => {
      const interceptor = module.get<LoggingInterceptor>(LoggingInterceptor);
      expect(interceptor).toBeDefined();
      // LoggingInterceptor should have access to its dependencies
      expect(interceptor['loggingService']).toBeDefined();
      expect(interceptor['contextManager']).toBeDefined();
      expect(interceptor['sanitizationService']).toBeDefined();
    });

    it('should inject LogController dependencies correctly', () => {
      const controller = module.get<LogController>(LogController);
      expect(controller).toBeDefined();
      // LogController should have access to its dependencies
      expect(controller['loggingService']).toBeDefined();
      expect(controller['logRepository']).toBeDefined();
      expect(controller['contextManager']).toBeDefined();
      expect(controller['sanitizationService']).toBeDefined();
    });
  });

  describe('TypeORM Integration', () => {
    it('should register ApplicationLog entity', () => {
      const repository = module.get<LogRepository>(LogRepository);
      expect(repository['applicationLogRepository']).toBeDefined();
    });

    it('should register RequestLog entity', () => {
      const repository = module.get<LogRepository>(LogRepository);
      expect(repository['requestLogRepository']).toBeDefined();
    });

    it('should register BusinessEventLog entity', () => {
      const repository = module.get<LogRepository>(LogRepository);
      expect(repository['businessEventLogRepository']).toBeDefined();
    });

    it('should register PerformanceLog entity', () => {
      const repository = module.get<LogRepository>(LogRepository);
      expect(repository['performanceLogRepository']).toBeDefined();
    });
  });

  describe('Module Integration', () => {
    it('should allow LoggingService to use LogRepository', async () => {
      const service = module.get<LoggingService>(LoggingService);
      const repository = module.get<LogRepository>(LogRepository);
      
      // Test that service can access repository
      expect(service['logRepository']).toBe(repository);
    });

    it('should allow LoggingService to use ContextManager', () => {
      const service = module.get<LoggingService>(LoggingService);
      const contextManager = module.get<ContextManager>(ContextManager);
      
      // Test that service can access context manager
      expect(service['contextManager']).toBe(contextManager);
    });

    it('should allow LoggingService to use LogSanitizationService', () => {
      const service = module.get<LoggingService>(LoggingService);
      const sanitizationService = module.get<LogSanitizationService>(LogSanitizationService);
      
      // Test that service can access sanitization service
      expect(service['sanitizationService']).toBe(sanitizationService);
    });

    it('should allow LoggingInterceptor to use LoggingService', () => {
      const interceptor = module.get<LoggingInterceptor>(LoggingInterceptor);
      const service = module.get<LoggingService>(LoggingService);
      
      // Test that interceptor can access logging service
      expect(interceptor['loggingService']).toBe(service);
    });
  });
});
