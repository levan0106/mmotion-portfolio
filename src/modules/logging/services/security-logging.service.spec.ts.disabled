import { Test, TestingModule } from '@nestjs/testing';
import { SecurityLoggingService, AuthenticationEvent, AuthorizationEvent, SuspiciousActivityEvent, AuditTrailEvent } from './security-logging.service';
import { LoggingService } from './logging.service';
import { ContextManager } from './context-manager.service';
import { LogSanitizationService } from './log-sanitization.service';

describe('SecurityLoggingService', () => {
  let service: SecurityLoggingService;
  let loggingService: jest.Mocked<LoggingService>;
  let contextManager: jest.Mocked<ContextManager>;
  let sanitizationService: jest.Mocked<LogSanitizationService>;

  beforeEach(async () => {
    const module: TestingModule = await Test.createTestingModule({
      providers: [
        SecurityLoggingService,
        {
          provide: LoggingService,
          useValue: {
            info: jest.fn(),
            warn: jest.fn(),
            error: jest.fn(),
            logBusinessEvent: jest.fn(),
          },
        },
        {
          provide: ContextManager,
          useValue: {
            getCurrentContext: jest.fn(),
          },
        },
        {
          provide: LogSanitizationService,
          useValue: {
            sanitizeObject: jest.fn((obj) => obj),
          },
        },
      ],
    }).compile();

    service = module.get<SecurityLoggingService>(SecurityLoggingService);
    loggingService = module.get(LoggingService);
    contextManager = module.get(ContextManager);
    sanitizationService = module.get(LogSanitizationService);
  });

  afterEach(() => {
    jest.clearAllMocks();
    service.clearSecurityData();
  });

  describe('logAuthentication', () => {
    it('should log successful authentication', () => {
      const event: AuthenticationEvent = {
        eventType: 'AUTHENTICATION',
        severity: 'MEDIUM',
        description: 'User login successful',
        authMethod: 'PASSWORD',
        success: true,
        userId: 'user123',
        ipAddress: '192.168.1.1',
        userAgent: 'Mozilla/5.0',
        sessionId: 'session123',
      };

      contextManager.getCurrentContext.mockReturnValue({
        requestId: 'req123',
        correlationId: 'corr123',
      });

      service.logAuthentication(event);

      expect(loggingService.info).toHaveBeenCalledWith(
        'Authentication Event: SUCCESS',
        expect.objectContaining({
          eventType: 'SECURITY_AUTHENTICATION',
          success: true,
          userId: 'user123',
        }),
      );

      expect(loggingService.logBusinessEvent).toHaveBeenCalledWith(
        'AUTHENTICATION',
        'User authentication successful',
        'SECURITY',
        'medium',
        expect.any(Object),
      );
    });

    it('should log failed authentication', () => {
      const event: AuthenticationEvent = {
        eventType: 'AUTHENTICATION',
        severity: 'HIGH',
        description: 'User login failed',
        authMethod: 'PASSWORD',
        success: false,
        failureReason: 'Invalid password',
        ipAddress: '192.168.1.1',
        userAgent: 'Mozilla/5.0',
      };

      contextManager.getCurrentContext.mockReturnValue({
        requestId: 'req123',
        correlationId: 'corr123',
      });

      service.logAuthentication(event);

      expect(loggingService.info).toHaveBeenCalledWith(
        'Authentication Event: FAILURE',
        expect.objectContaining({
          eventType: 'SECURITY_AUTHENTICATION',
          success: false,
          failureReason: 'Invalid password',
        }),
      );

      expect(loggingService.logBusinessEvent).toHaveBeenCalledWith(
        'AUTHENTICATION',
        'User authentication failed',
        'SECURITY',
        'high',
        expect.any(Object),
      );
    });

    it('should detect and log suspicious activity for multiple failed logins', () => {
      const ipAddress = '192.168.1.1';
      
      // Simulate multiple failed login attempts
      for (let i = 0; i < 6; i++) {
        const event: AuthenticationEvent = {
          eventType: 'AUTHENTICATION',
          severity: 'HIGH',
          description: 'User login failed',
          authMethod: 'PASSWORD',
          success: false,
          failureReason: 'Invalid password',
          ipAddress,
        };

        contextManager.getCurrentContext.mockReturnValue({
          requestId: `req${i}`,
          correlationId: `corr${i}`,
        });

        service.logAuthentication(event);
      }

      // Should have logged suspicious activity
      expect(loggingService.warn).toHaveBeenCalledWith(
        'Suspicious Activity Detected: MULTIPLE_FAILED_LOGINS',
        expect.objectContaining({
          eventType: 'SECURITY_SUSPICIOUS_ACTIVITY',
          activityType: 'MULTIPLE_FAILED_LOGINS',
          riskScore: expect.any(Number),
        }),
      );
    });
  });

  describe('logAuthorization', () => {
    it('should log successful authorization', () => {
      const event: AuthorizationEvent = {
        eventType: 'AUTHORIZATION',
        severity: 'MEDIUM',
        description: 'User access granted',
        resource: '/api/users',
        action: 'READ',
        success: true,
        userId: 'user123',
        ipAddress: '192.168.1.1',
        requiredPermissions: ['user:read'],
        userPermissions: ['user:read', 'user:write'],
      };

      contextManager.getCurrentContext.mockReturnValue({
        requestId: 'req123',
        correlationId: 'corr123',
      });

      service.logAuthorization(event);

      expect(loggingService.info).toHaveBeenCalledWith(
        'Authorization Event: GRANTED',
        expect.objectContaining({
          eventType: 'SECURITY_AUTHORIZATION',
          success: true,
          resource: '/api/users',
          action: 'READ',
        }),
      );

      expect(loggingService.logBusinessEvent).toHaveBeenCalledWith(
        'AUTHORIZATION',
        'User authorization granted',
        'SECURITY',
        'medium',
        expect.any(Object),
      );
    });

    it('should log failed authorization', () => {
      const event: AuthorizationEvent = {
        eventType: 'AUTHORIZATION',
        severity: 'HIGH',
        description: 'User access denied',
        resource: '/api/admin',
        action: 'DELETE',
        success: false,
        failureReason: 'Insufficient permissions',
        userId: 'user123',
        ipAddress: '192.168.1.1',
        requiredPermissions: ['admin:delete'],
        userPermissions: ['user:read'],
      };

      contextManager.getCurrentContext.mockReturnValue({
        requestId: 'req123',
        correlationId: 'corr123',
      });

      service.logAuthorization(event);

      expect(loggingService.info).toHaveBeenCalledWith(
        'Authorization Event: DENIED',
        expect.objectContaining({
          eventType: 'SECURITY_AUTHORIZATION',
          success: false,
          failureReason: 'Insufficient permissions',
        }),
      );

      expect(loggingService.logBusinessEvent).toHaveBeenCalledWith(
        'AUTHORIZATION',
        'User authorization denied',
        'SECURITY',
        'high',
        expect.any(Object),
      );
    });

    it('should detect privilege escalation attempts', () => {
      const event: AuthorizationEvent = {
        eventType: 'AUTHORIZATION',
        severity: 'HIGH',
        description: 'User access denied',
        resource: '/api/admin',
        action: 'DELETE',
        success: false,
        failureReason: 'Insufficient permissions',
        userId: 'user123',
        ipAddress: '192.168.1.1',
        requiredPermissions: ['admin:delete', 'admin:write'],
        userPermissions: ['user:read'],
      };

      contextManager.getCurrentContext.mockReturnValue({
        requestId: 'req123',
        correlationId: 'corr123',
      });

      service.logAuthorization(event);

      // Should have logged suspicious activity for privilege escalation
      expect(loggingService.warn).toHaveBeenCalledWith(
        'Suspicious Activity Detected: PRIVILEGE_ESCALATION',
        expect.objectContaining({
          eventType: 'SECURITY_SUSPICIOUS_ACTIVITY',
          activityType: 'PRIVILEGE_ESCALATION',
          riskScore: 60,
        }),
      );
    });
  });

  describe('logSuspiciousActivity', () => {
    it('should log suspicious activity', () => {
      const event: SuspiciousActivityEvent = {
        eventType: 'SUSPICIOUS_ACTIVITY',
        severity: 'HIGH',
        description: 'Unusual access pattern detected',
        activityType: 'UNUSUAL_ACCESS_PATTERN',
        riskScore: 75,
        indicators: ['Access from unusual location', 'Unusual time of access'],
        userId: 'user123',
        ipAddress: '192.168.1.1',
      };

      contextManager.getCurrentContext.mockReturnValue({
        requestId: 'req123',
        correlationId: 'corr123',
      });

      service.logSuspiciousActivity(event);

      expect(loggingService.warn).toHaveBeenCalledWith(
        'Suspicious Activity Detected: UNUSUAL_ACCESS_PATTERN',
        expect.objectContaining({
          eventType: 'SECURITY_SUSPICIOUS_ACTIVITY',
          activityType: 'UNUSUAL_ACCESS_PATTERN',
          riskScore: 75,
        }),
      );

      expect(loggingService.logBusinessEvent).toHaveBeenCalledWith(
        'SUSPICIOUS_ACTIVITY',
        'Suspicious activity detected: UNUSUAL_ACCESS_PATTERN',
        'SECURITY',
        'high',
        expect.any(Object),
      );
    });

    it('should generate security alert for high-risk activities', () => {
      const event: SuspiciousActivityEvent = {
        eventType: 'SUSPICIOUS_ACTIVITY',
        severity: 'CRITICAL',
        description: 'Critical security threat detected',
        activityType: 'DATA_EXFILTRATION',
        riskScore: 95,
        indicators: ['Large data transfer', 'Unusual file access'],
        userId: 'user123',
        ipAddress: '192.168.1.1',
      };

      contextManager.getCurrentContext.mockReturnValue({
        requestId: 'req123',
        correlationId: 'corr123',
      });

      service.logSuspiciousActivity(event);

      // Should have generated security alert
      expect(loggingService.error).toHaveBeenCalledWith(
        'SECURITY ALERT: High-risk activity detected',
        expect.objectContaining({
          alertType: 'SECURITY_THREAT',
          severity: 'CRITICAL',
          riskScore: 95,
          activityType: 'DATA_EXFILTRATION',
        }),
      );
    });
  });

  describe('logAuditTrail', () => {
    it('should log audit trail event', () => {
      const event: AuditTrailEvent = {
        eventType: 'AUDIT_TRAIL',
        severity: 'MEDIUM',
        description: 'User profile updated',
        operation: 'UPDATE',
        resource: 'user_profile',
        userId: 'user123',
        oldValue: { name: 'John Doe' },
        newValue: { name: 'Jane Doe' },
        sensitiveData: false,
      };

      contextManager.getCurrentContext.mockReturnValue({
        requestId: 'req123',
        correlationId: 'corr123',
      });

      service.logAuditTrail(event);

      expect(loggingService.info).toHaveBeenCalledWith(
        'Audit Trail: UPDATE on user_profile',
        expect.objectContaining({
          eventType: 'SECURITY_AUDIT_TRAIL',
          operation: 'UPDATE',
          resource: 'user_profile',
        }),
      );

      expect(loggingService.logBusinessEvent).toHaveBeenCalledWith(
        'AUDIT_TRAIL',
        'UPDATE operation on user_profile',
        'SECURITY',
        'medium',
        expect.any(Object),
      );
    });

    it('should log sensitive data audit trail with high severity', () => {
      const event: AuditTrailEvent = {
        eventType: 'AUDIT_TRAIL',
        severity: 'HIGH',
        description: 'Sensitive data accessed',
        operation: 'READ',
        resource: 'financial_data',
        userId: 'user123',
        sensitiveData: true,
      };

      contextManager.getCurrentContext.mockReturnValue({
        requestId: 'req123',
        correlationId: 'corr123',
      });

      service.logAuditTrail(event);

      expect(loggingService.logBusinessEvent).toHaveBeenCalledWith(
        'AUDIT_TRAIL',
        'READ operation on financial_data',
        'SECURITY',
        'high',
        expect.any(Object),
      );
    });
  });

  describe('getSecurityStatistics', () => {
    it('should return security statistics', () => {
      // Simulate some failed login attempts
      const event: AuthenticationEvent = {
        eventType: 'AUTHENTICATION',
        severity: 'HIGH',
        description: 'User login failed',
        authMethod: 'PASSWORD',
        success: false,
        failureReason: 'Invalid password',
        ipAddress: '192.168.1.1',
      };

      contextManager.getCurrentContext.mockReturnValue({
        requestId: 'req123',
        correlationId: 'corr123',
      });

      service.logAuthentication(event);
      service.logAuthentication(event);

      const stats = service.getSecurityStatistics();

      expect(stats).toEqual({
        totalFailedLogins: 2,
        activeSuspiciousIPs: 1,
        recentAlerts: 0,
        riskDistribution: {
          low: 0,
          medium: 0,
          high: 0,
          critical: 0,
        },
      });
    });
  });

  describe('clearSecurityData', () => {
    it('should clear all security tracking data', () => {
      // Add some data
      const event: AuthenticationEvent = {
        eventType: 'AUTHENTICATION',
        severity: 'HIGH',
        description: 'User login failed',
        authMethod: 'PASSWORD',
        success: false,
        failureReason: 'Invalid password',
        ipAddress: '192.168.1.1',
      };

      contextManager.getCurrentContext.mockReturnValue({
        requestId: 'req123',
        correlationId: 'corr123',
      });

      service.logAuthentication(event);

      // Verify data exists
      let stats = service.getSecurityStatistics();
      expect(stats.totalFailedLogins).toBe(1);
      expect(stats.activeSuspiciousIPs).toBe(1);

      // Clear data
      service.clearSecurityData();

      // Verify data is cleared
      stats = service.getSecurityStatistics();
      expect(stats.totalFailedLogins).toBe(0);
      expect(stats.activeSuspiciousIPs).toBe(0);
    });
  });

  describe('sanitization', () => {
    it('should sanitize security event data', () => {
      const event: AuthenticationEvent = {
        eventType: 'AUTHENTICATION',
        severity: 'HIGH',
        description: 'User login failed',
        authMethod: 'PASSWORD',
        success: false,
        failureReason: 'Invalid password',
        userId: 'user123',
        ipAddress: '192.168.1.1',
        metadata: {
          password: 'secret123',
          token: 'abc123',
        },
      };

      sanitizationService.sanitizeObject.mockReturnValue({
        ...event,
        metadata: {
          password: '[REDACTED]',
          token: '[REDACTED]',
        },
      });

      contextManager.getCurrentContext.mockReturnValue({
        requestId: 'req123',
        correlationId: 'corr123',
      });

      service.logAuthentication(event);

      expect(sanitizationService.sanitizeObject).toHaveBeenCalledWith(event);
    });
  });
});
