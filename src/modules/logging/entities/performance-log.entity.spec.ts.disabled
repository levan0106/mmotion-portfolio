import { Test, TestingModule } from '@nestjs/testing';
import { getRepositoryToken } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import { PerformanceLog } from './performance-log.entity';

describe('PerformanceLog Entity', () => {
  let repository: Repository<PerformanceLog>;
  let module: TestingModule;

  beforeEach(async () => {
    module = await Test.createTestingModule({
      providers: [
        {
          provide: getRepositoryToken(PerformanceLog),
          useClass: Repository,
        },
      ],
    }).compile();

    repository = module.get<Repository<PerformanceLog>>(
      getRepositoryToken(PerformanceLog),
    );
  });

  afterEach(async () => {
    await module.close();
  });

  describe('Entity Creation', () => {
    it('should create PerformanceLog entity with all required properties', () => {
      const performanceLog = new PerformanceLog();
      performanceLog.operation_name = 'portfolio_calculation';
      performanceLog.operation_type = 'CALCULATION';
      performanceLog.duration_ms = 150;
      performanceLog.timestamp = new Date();

      expect(performanceLog.operation_name).toBe('portfolio_calculation');
      expect(performanceLog.operation_type).toBe('CALCULATION');
      expect(performanceLog.duration_ms).toBe(150);
      expect(performanceLog.timestamp).toBeInstanceOf(Date);
    });

    it('should create PerformanceLog entity with optional properties', () => {
      const performanceLog = new PerformanceLog();
      performanceLog.operation_name = 'trade_execution';
      performanceLog.operation_type = 'DATABASE_QUERY';
      performanceLog.duration_ms = 250;
      performanceLog.timestamp = new Date();
      performanceLog.memory_usage_mb = 45.67;
      performanceLog.cpu_usage_percent = 12.34;
      performanceLog.database_queries = 5;
      performanceLog.cache_hits = 3;
      performanceLog.cache_misses = 2;
      performanceLog.external_api_calls = 1;
      performanceLog.metadata = {
        portfolioId: 'portfolio-123',
        trade_count: 10,
        calculation_method: 'FIFO'
      };

      expect(performanceLog.memory_usage_mb).toBe(45.67);
      expect(performanceLog.cpu_usage_percent).toBe(12.34);
      expect(performanceLog.database_queries).toBe(5);
      expect(performanceLog.cache_hits).toBe(3);
      expect(performanceLog.cache_misses).toBe(2);
      expect(performanceLog.external_api_calls).toBe(1);
      expect(performanceLog.metadata).toEqual({
        portfolioId: 'portfolio-123',
        trade_count: 10,
        calculation_method: 'FIFO'
      });
    });
  });

  describe('Entity Validation', () => {
    it('should accept valid operation types', () => {
      const validOperationTypes = [
        'CALCULATION',
        'DATABASE_QUERY',
        'API_CALL',
        'CACHE_OPERATION',
        'FILE_OPERATION',
        'NETWORK_REQUEST',
        'BUSINESS_LOGIC',
        'VALIDATION'
      ];
      
      validOperationTypes.forEach(operationType => {
        const performanceLog = new PerformanceLog();
        performanceLog.operation_name = 'test_operation';
        performanceLog.operation_type = operationType;
        performanceLog.duration_ms = 100;
        performanceLog.timestamp = new Date();

        expect(performanceLog.operation_type).toBe(operationType);
      });
    });

    it('should accept valid operation names', () => {
      const validOperationNames = [
        'portfolio_calculation',
        'trade_execution',
        'market_data_fetch',
        'risk_calculation',
        'nav_snapshot_creation',
        'asset_allocation_update',
        'performance_metrics_calculation',
        'cache_warmup'
      ];
      
      validOperationNames.forEach(operationName => {
        const performanceLog = new PerformanceLog();
        performanceLog.operation_name = operationName;
        performanceLog.operation_type = 'CALCULATION';
        performanceLog.duration_ms = 100;
        performanceLog.timestamp = new Date();

        expect(performanceLog.operation_name).toBe(operationName);
      });
    });

    it('should handle numeric constraints properly', () => {
      const performanceLog = new PerformanceLog();
      
      // Test duration (required integer)
      performanceLog.duration_ms = 1500;
      expect(performanceLog.duration_ms).toBe(1500);
      expect(typeof performanceLog.duration_ms).toBe('number');

      // Test memory usage (optional decimal)
      performanceLog.memory_usage_mb = 123.45;
      expect(performanceLog.memory_usage_mb).toBe(123.45);
      expect(typeof performanceLog.memory_usage_mb).toBe('number');

      // Test CPU usage (optional decimal)
      performanceLog.cpu_usage_percent = 67.89;
      expect(performanceLog.cpu_usage_percent).toBe(67.89);
      expect(typeof performanceLog.cpu_usage_percent).toBe('number');

      // Test counters (optional integers)
      performanceLog.database_queries = 25;
      performanceLog.cache_hits = 15;
      performanceLog.cache_misses = 10;
      performanceLog.external_api_calls = 3;

      expect(performanceLog.database_queries).toBe(25);
      expect(performanceLog.cache_hits).toBe(15);
      expect(performanceLog.cache_misses).toBe(10);
      expect(performanceLog.external_api_calls).toBe(3);
    });

    it('should handle JSON metadata properly', () => {
      const performanceLog = new PerformanceLog();
      const metadataData = {
        portfolioId: 'portfolio-123',
        user_id: 'user-456',
        calculation_method: 'FIFO',
        trade_count: 25,
        asset_count: 10,
        parameters: {
          start_date: '2024-01-01',
          end_date: '2024-12-31',
          currency: 'VND'
        },
        results: {
          total_value: 1500000,
          profit_loss: 150000,
          return_percentage: 11.11
        }
      };

      performanceLog.metadata = metadataData;

      expect(performanceLog.metadata).toEqual(metadataData);
      expect(typeof performanceLog.metadata).toBe('object');
      expect(performanceLog.metadata.portfolioId).toBe('portfolio-123');
      expect(performanceLog.metadata.parameters.currency).toBe('VND');
    });

    it('should handle null and undefined optional properties', () => {
      const performanceLog = new PerformanceLog();
      performanceLog.operation_name = 'test_operation';
      performanceLog.operation_type = 'CALCULATION';
      performanceLog.duration_ms = 100;
      performanceLog.timestamp = new Date();

      // Optional properties should be undefined by default
      expect(performanceLog.memory_usage_mb).toBeUndefined();
      expect(performanceLog.cpu_usage_percent).toBeUndefined();
      expect(performanceLog.database_queries).toBeUndefined();
      expect(performanceLog.cache_hits).toBeUndefined();
      expect(performanceLog.cache_misses).toBeUndefined();
      expect(performanceLog.external_api_calls).toBeUndefined();
      expect(performanceLog.metadata).toBeUndefined();
    });
  });

  describe('Entity Timestamps', () => {
    it('should set timestamp when created', () => {
      const performanceLog = new PerformanceLog();
      const now = new Date();
      performanceLog.timestamp = now;

      expect(performanceLog.timestamp).toBe(now);
    });

    it('should have created_at timestamp set by TypeORM', () => {
      const performanceLog = new PerformanceLog();
      // created_at is set by @CreateDateColumn() decorator
      // In real scenario, this would be set by TypeORM
      expect(performanceLog.created_at).toBeUndefined(); // Initially undefined
    });
  });

  describe('Entity Constraints', () => {
    it('should enforce required fields', () => {
      const performanceLog = new PerformanceLog();
      
      // These should be required based on entity definition
      expect(() => {
        // In real scenario, TypeORM would validate these constraints
        performanceLog.operation_name = 'test_operation';
        performanceLog.operation_type = 'CALCULATION';
        performanceLog.duration_ms = 100;
        performanceLog.timestamp = new Date();
      }).not.toThrow();
    });

    it('should handle string length constraints', () => {
      const performanceLog = new PerformanceLog();
      
      // Test various string lengths
      performanceLog.operation_name = 'very_long_operation_name_that_should_be_under_100_chars'; // varchar(100)
      performanceLog.operation_type = 'CALCULATION'; // varchar(50)

      expect(performanceLog.operation_name.length).toBeLessThanOrEqual(100);
      expect(performanceLog.operation_type.length).toBeLessThanOrEqual(50);
    });

    it('should handle decimal precision constraints', () => {
      const performanceLog = new PerformanceLog();
      
      // Test memory usage (precision 10, scale 2)
      performanceLog.memory_usage_mb = 123456.78; // Should fit in precision 10, scale 2
      expect(performanceLog.memory_usage_mb).toBe(123456.78);

      // Test CPU usage (precision 5, scale 2)
      performanceLog.cpu_usage_percent = 99.99; // Should fit in precision 5, scale 2
      expect(performanceLog.cpu_usage_percent).toBe(99.99);
    });
  });

  describe('Performance Scenarios', () => {
    it('should handle portfolio calculation performance', () => {
      const performanceLog = new PerformanceLog();
      performanceLog.operation_name = 'portfolio_calculation';
      performanceLog.operation_type = 'CALCULATION';
      performanceLog.duration_ms = 1250;
      performanceLog.timestamp = new Date();
      performanceLog.memory_usage_mb = 67.89;
      performanceLog.cpu_usage_percent = 45.67;
      performanceLog.database_queries = 12;
      performanceLog.cache_hits = 8;
      performanceLog.cache_misses = 4;
      performanceLog.metadata = {
        portfolioId: 'portfolio-123',
        calculation_method: 'FIFO',
        trade_count: 150,
        asset_count: 25
      };

      expect(performanceLog.operation_name).toBe('portfolio_calculation');
      expect(performanceLog.duration_ms).toBe(1250);
      expect(performanceLog.memory_usage_mb).toBe(67.89);
      expect(performanceLog.metadata.portfolioId).toBe('portfolio-123');
    });

    it('should handle database query performance', () => {
      const performanceLog = new PerformanceLog();
      performanceLog.operation_name = 'trade_history_query';
      performanceLog.operation_type = 'DATABASE_QUERY';
      performanceLog.duration_ms = 350;
      performanceLog.timestamp = new Date();
      performanceLog.database_queries = 1;
      performanceLog.cache_hits = 0;
      performanceLog.cache_misses = 1;
      performanceLog.metadata = {
        query_type: 'SELECT',
        table_name: 'trades',
        row_count: 1000,
        execution_plan: 'INDEX_SCAN'
      };

      expect(performanceLog.operation_type).toBe('DATABASE_QUERY');
      expect(performanceLog.duration_ms).toBe(350);
      expect(performanceLog.database_queries).toBe(1);
      expect(performanceLog.metadata.query_type).toBe('SELECT');
    });

    it('should handle API call performance', () => {
      const performanceLog = new PerformanceLog();
      performanceLog.operation_name = 'market_data_fetch';
      performanceLog.operation_type = 'API_CALL';
      performanceLog.duration_ms = 800;
      performanceLog.timestamp = new Date();
      performanceLog.external_api_calls = 1;
      performanceLog.metadata = {
        api_endpoint: 'https://api.marketdata.com/prices',
        symbols: ['AAPL', 'GOOGL', 'MSFT'],
        response_size_bytes: 2048,
        status_code: 200
      };

      expect(performanceLog.operation_type).toBe('API_CALL');
      expect(performanceLog.duration_ms).toBe(800);
      expect(performanceLog.external_api_calls).toBe(1);
      expect(performanceLog.metadata.status_code).toBe(200);
    });

    it('should handle cache operation performance', () => {
      const performanceLog = new PerformanceLog();
      performanceLog.operation_name = 'cache_warmup';
      performanceLog.operation_type = 'CACHE_OPERATION';
      performanceLog.duration_ms = 150;
      performanceLog.timestamp = new Date();
      performanceLog.cache_hits = 0;
      performanceLog.cache_misses = 100;
      performanceLog.metadata = {
        cache_type: 'REDIS',
        keys_processed: 100,
        memory_used_mb: 25.5,
        eviction_count: 0
      };

      expect(performanceLog.operation_type).toBe('CACHE_OPERATION');
      expect(performanceLog.duration_ms).toBe(150);
      expect(performanceLog.cache_misses).toBe(100);
      expect(performanceLog.metadata.cache_type).toBe('REDIS');
    });
  });

  describe('Performance Metrics Validation', () => {
    it('should handle extreme performance values', () => {
      const performanceLog = new PerformanceLog();
      
      // Very fast operation
      performanceLog.duration_ms = 1;
      expect(performanceLog.duration_ms).toBe(1);

      // Very slow operation
      performanceLog.duration_ms = 300000; // 5 minutes
      expect(performanceLog.duration_ms).toBe(300000);

      // High memory usage
      performanceLog.memory_usage_mb = 9999.99;
      expect(performanceLog.memory_usage_mb).toBe(9999.99);

      // High CPU usage
      performanceLog.cpu_usage_percent = 100.00;
      expect(performanceLog.cpu_usage_percent).toBe(100.00);

      // Many database queries
      performanceLog.database_queries = 1000;
      expect(performanceLog.database_queries).toBe(1000);
    });
  });
});
