import { Test, TestingModule } from '@nestjs/testing';
import { getRepositoryToken } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import { RequestLog } from './request-log.entity';
import { Account } from '../../shared/entities/account.entity';

describe('RequestLog Entity', () => {
  let repository: Repository<RequestLog>;
  let module: TestingModule;

  beforeEach(async () => {
    module = await Test.createTestingModule({
      providers: [
        {
          provide: getRepositoryToken(RequestLog),
          useClass: Repository,
        },
      ],
    }).compile();

    repository = module.get<Repository<RequestLog>>(
      getRepositoryToken(RequestLog),
    );
  });

  afterEach(async () => {
    await module.close();
  });

  describe('Entity Creation', () => {
    it('should create RequestLog entity with all required properties', () => {
      const requestLog = new RequestLog();
      requestLog.request_id = 'req-123-456-789';
      requestLog.method = 'GET';
      requestLog.url = '/api/v1/portfolios';
      requestLog.timestamp = new Date();

      expect(requestLog.request_id).toBe('req-123-456-789');
      expect(requestLog.method).toBe('GET');
      expect(requestLog.url).toBe('/api/v1/portfolios');
      expect(requestLog.timestamp).toBeInstanceOf(Date);
    });

    it('should create RequestLog entity with optional properties', () => {
      const requestLog = new RequestLog();
      requestLog.request_id = 'req-123-456-789';
      requestLog.method = 'POST';
      requestLog.url = '/api/v1/portfolios';
      requestLog.timestamp = new Date();
      requestLog.headers = { 
        'Content-Type': 'application/json',
        'Authorization': 'Bearer token123'
      };
      requestLog.body = { name: 'Test Portfolio', description: 'Test Description' };
      requestLog.query_params = { page: '1', limit: '10' };
      requestLog.user_id = 'user-456';
      requestLog.ip_address = '192.168.1.1';
      requestLog.user_agent = 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36';
      requestLog.response_status = 201;
      requestLog.response_time_ms = 150;
      requestLog.response_size_bytes = 1024;

      expect(requestLog.headers).toEqual({ 
        'Content-Type': 'application/json',
        'Authorization': 'Bearer token123'
      });
      expect(requestLog.body).toEqual({ name: 'Test Portfolio', description: 'Test Description' });
      expect(requestLog.query_params).toEqual({ page: '1', limit: '10' });
      expect(requestLog.user_id).toBe('user-456');
      expect(requestLog.ip_address).toBe('192.168.1.1');
      expect(requestLog.user_agent).toBe('Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36');
      expect(requestLog.response_status).toBe(201);
      expect(requestLog.response_time_ms).toBe(150);
      expect(requestLog.response_size_bytes).toBe(1024);
    });
  });

  describe('Entity Validation', () => {
    it('should accept valid HTTP methods', () => {
      const validMethods = ['GET', 'POST', 'PUT', 'DELETE', 'PATCH', 'HEAD', 'OPTIONS'];
      
      validMethods.forEach(method => {
        const requestLog = new RequestLog();
        requestLog.request_id = 'req-123';
        requestLog.method = method;
        requestLog.url = '/api/test';
        requestLog.timestamp = new Date();

        expect(requestLog.method).toBe(method);
      });
    });

    it('should handle JSON data properly', () => {
      const requestLog = new RequestLog();
      const headersData = {
        'Content-Type': 'application/json',
        'Authorization': 'Bearer token123',
        'User-Agent': 'Mozilla/5.0',
        'Accept': 'application/json'
      };
      const bodyData = {
        name: 'Test Portfolio',
        description: 'Test Description',
        assets: [
          { symbol: 'AAPL', quantity: 100 },
          { symbol: 'GOOGL', quantity: 50 }
        ]
      };
      const queryData = {
        page: '1',
        limit: '10',
        sort: 'name',
        order: 'asc'
      };

      requestLog.headers = headersData;
      requestLog.body = bodyData;
      requestLog.query_params = queryData;

      expect(requestLog.headers).toEqual(headersData);
      expect(requestLog.body).toEqual(bodyData);
      expect(requestLog.query_params).toEqual(queryData);
      expect(typeof requestLog.headers).toBe('object');
      expect(typeof requestLog.body).toBe('object');
      expect(typeof requestLog.query_params).toBe('object');
    });

    it('should handle null and undefined optional properties', () => {
      const requestLog = new RequestLog();
      requestLog.request_id = 'req-123';
      requestLog.method = 'GET';
      requestLog.url = '/api/test';
      requestLog.timestamp = new Date();

      // Optional properties should be undefined by default
      expect(requestLog.headers).toBeUndefined();
      expect(requestLog.body).toBeUndefined();
      expect(requestLog.query_params).toBeUndefined();
      expect(requestLog.user_id).toBeUndefined();
      expect(requestLog.ip_address).toBeUndefined();
      expect(requestLog.user_agent).toBeUndefined();
      expect(requestLog.response_status).toBeUndefined();
      expect(requestLog.response_time_ms).toBeUndefined();
      expect(requestLog.response_size_bytes).toBeUndefined();
    });
  });

  describe('Entity Relationships', () => {
    it('should have optional relationship with Account entity', () => {
      const requestLog = new RequestLog();
      const account = new Account();
      account.account_id = 'account-123';
      account.name = 'Test Account';

      requestLog.account = account;

      expect(requestLog.account).toBe(account);
      expect(requestLog.account.account_id).toBe('account-123');
    });
  });

  describe('Entity Timestamps', () => {
    it('should set timestamp when created', () => {
      const requestLog = new RequestLog();
      const now = new Date();
      requestLog.timestamp = now;

      expect(requestLog.timestamp).toBe(now);
    });

    it('should have created_at timestamp set by TypeORM', () => {
      const requestLog = new RequestLog();
      // created_at is set by @CreateDateColumn() decorator
      // In real scenario, this would be set by TypeORM
      expect(requestLog.created_at).toBeUndefined(); // Initially undefined
    });
  });

  describe('Entity Constraints', () => {
    it('should enforce required fields', () => {
      const requestLog = new RequestLog();
      
      // These should be required based on entity definition
      expect(() => {
        // In real scenario, TypeORM would validate these constraints
        requestLog.request_id = 'req-123';
        requestLog.method = 'GET';
        requestLog.url = '/api/test';
        requestLog.timestamp = new Date();
      }).not.toThrow();
    });

    it('should handle string length constraints', () => {
      const requestLog = new RequestLog();
      
      // Test various string lengths
      requestLog.method = 'GET'; // varchar(10)
      requestLog.url = '/api/v1/portfolios/very/long/url/path'; // text (no limit)
      requestLog.user_agent = 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'; // text (no limit)

      expect(requestLog.method.length).toBeLessThanOrEqual(10);
      expect(requestLog.url.length).toBeGreaterThan(0);
      expect(requestLog.user_agent.length).toBeGreaterThan(0);
    });

    it('should handle numeric constraints', () => {
      const requestLog = new RequestLog();
      
      // Test numeric values
      requestLog.response_status = 200;
      requestLog.response_time_ms = 150;
      requestLog.response_size_bytes = 1024;

      expect(typeof requestLog.response_status).toBe('number');
      expect(typeof requestLog.response_time_ms).toBe('number');
      expect(typeof requestLog.response_size_bytes).toBe('number');
      expect(requestLog.response_status).toBeGreaterThan(0);
      expect(requestLog.response_time_ms).toBeGreaterThan(0);
      expect(requestLog.response_size_bytes).toBeGreaterThan(0);
    });
  });

  describe('Unique Constraints', () => {
    it('should enforce unique request_id constraint', () => {
      const requestLog1 = new RequestLog();
      requestLog1.request_id = 'req-unique-123';
      requestLog1.method = 'GET';
      requestLog1.url = '/api/test';
      requestLog1.timestamp = new Date();

      const requestLog2 = new RequestLog();
      requestLog2.request_id = 'req-unique-123'; // Same request_id
      requestLog2.method = 'POST';
      requestLog2.url = '/api/test2';
      requestLog2.timestamp = new Date();

      // In real scenario, TypeORM would enforce unique constraint
      expect(requestLog1.request_id).toBe(requestLog2.request_id);
    });
  });

  describe('IP Address Handling', () => {
    it('should handle IPv4 addresses', () => {
      const requestLog = new RequestLog();
      requestLog.ip_address = '192.168.1.1';

      expect(requestLog.ip_address).toBe('192.168.1.1');
    });

    it('should handle IPv6 addresses', () => {
      const requestLog = new RequestLog();
      requestLog.ip_address = '2001:0db8:85a3:0000:0000:8a2e:0370:7334';

      expect(requestLog.ip_address).toBe('2001:0db8:85a3:0000:0000:8a2e:0370:7334');
    });
  });

  describe('Response Status Codes', () => {
    it('should handle valid HTTP status codes', () => {
      const validStatusCodes = [200, 201, 204, 400, 401, 403, 404, 500, 502, 503];
      
      validStatusCodes.forEach(statusCode => {
        const requestLog = new RequestLog();
        requestLog.response_status = statusCode;

        expect(requestLog.response_status).toBe(statusCode);
      });
    });
  });
});
