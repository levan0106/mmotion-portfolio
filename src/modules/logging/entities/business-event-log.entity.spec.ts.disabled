import { Test, TestingModule } from '@nestjs/testing';
import { getRepositoryToken } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import { BusinessEventLog } from './business-event-log.entity';
import { Account } from '../../shared/entities/account.entity';
import { Portfolio } from '../../portfolio/entities/portfolio.entity';
import { Trade, TradeSide } from '../../trading/entities/trade.entity';

describe('BusinessEventLog Entity', () => {
  let repository: Repository<BusinessEventLog>;
  let module: TestingModule;

  beforeEach(async () => {
    module = await Test.createTestingModule({
      providers: [
        {
          provide: getRepositoryToken(BusinessEventLog),
          useClass: Repository,
        },
      ],
    }).compile();

    repository = module.get<Repository<BusinessEventLog>>(
      getRepositoryToken(BusinessEventLog),
    );
  });

  afterEach(async () => {
    await module.close();
  });

  describe('Entity Creation', () => {
    it('should create BusinessEventLog entity with all required properties', () => {
      const businessEventLog = new BusinessEventLog();
      businessEventLog.event_id = 'evt-123-456-789';
      businessEventLog.event_type = 'PORTFOLIO_CREATED';
      businessEventLog.entity_type = 'PORTFOLIO';
      businessEventLog.entity_id = 'portfolio-123';
      businessEventLog.action = 'CREATE';
      businessEventLog.timestamp = new Date();

      expect(businessEventLog.event_id).toBe('evt-123-456-789');
      expect(businessEventLog.event_type).toBe('PORTFOLIO_CREATED');
      expect(businessEventLog.entity_type).toBe('PORTFOLIO');
      expect(businessEventLog.entity_id).toBe('portfolio-123');
      expect(businessEventLog.action).toBe('CREATE');
      expect(businessEventLog.timestamp).toBeInstanceOf(Date);
    });

    it('should create BusinessEventLog entity with optional properties', () => {
      const businessEventLog = new BusinessEventLog();
      businessEventLog.event_id = 'evt-123-456-789';
      businessEventLog.event_type = 'TRADE_EXECUTED';
      businessEventLog.entity_type = 'TRADE';
      businessEventLog.entity_id = 'trade-123';
      businessEventLog.action = 'EXECUTE';
      businessEventLog.timestamp = new Date();
      businessEventLog.user_id = 'user-456';
      businessEventLog.old_values = { 
        status: 'PENDING',
        quantity: 0,
        price: 0
      };
      businessEventLog.new_values = { 
        status: 'EXECUTED',
        quantity: 100,
        price: 150.50
      };
      businessEventLog.metadata = { 
        source: 'API',
        reason: 'User initiated trade',
        market_conditions: 'NORMAL'
      };

      expect(businessEventLog.user_id).toBe('user-456');
      expect(businessEventLog.old_values).toEqual({ 
        status: 'PENDING',
        quantity: 0,
        price: 0
      });
      expect(businessEventLog.new_values).toEqual({ 
        status: 'EXECUTED',
        quantity: 100,
        price: 150.50
      });
      expect(businessEventLog.metadata).toEqual({ 
        source: 'API',
        reason: 'User initiated trade',
        market_conditions: 'NORMAL'
      });
    });
  });

  describe('Entity Validation', () => {
    it('should accept valid event types', () => {
      const validEventTypes = [
        'PORTFOLIO_CREATED',
        'PORTFOLIO_UPDATED',
        'PORTFOLIO_DELETED',
        'TRADE_EXECUTED',
        'TRADE_CANCELLED',
        'ASSET_ALLOCATED',
        'RISK_TARGET_SET',
        'CASH_FLOW_ADDED'
      ];
      
      validEventTypes.forEach(eventType => {
        const businessEventLog = new BusinessEventLog();
        businessEventLog.event_id = 'evt-123';
        businessEventLog.event_type = eventType;
        businessEventLog.entity_type = 'PORTFOLIO';
        businessEventLog.entity_id = 'entity-123';
        businessEventLog.action = 'CREATE';
        businessEventLog.timestamp = new Date();

        expect(businessEventLog.event_type).toBe(eventType);
      });
    });

    it('should accept valid entity types', () => {
      const validEntityTypes = [
        'PORTFOLIO',
        'TRADE',
        'ASSET',
        'RISK_TARGET',
        'CASH_FLOW',
        'NAV_SNAPSHOT'
      ];
      
      validEntityTypes.forEach(entityType => {
        const businessEventLog = new BusinessEventLog();
        businessEventLog.event_id = 'evt-123';
        businessEventLog.event_type = 'ENTITY_UPDATED';
        businessEventLog.entity_type = entityType;
        businessEventLog.entity_id = 'entity-123';
        businessEventLog.action = 'UPDATE';
        businessEventLog.timestamp = new Date();

        expect(businessEventLog.entity_type).toBe(entityType);
      });
    });

    it('should accept valid actions', () => {
      const validActions = [
        'CREATE',
        'UPDATE',
        'DELETE',
        'EXECUTE',
        'ALLOCATE',
        'CANCEL',
        'APPROVE',
        'REJECT'
      ];
      
      validActions.forEach(action => {
        const businessEventLog = new BusinessEventLog();
        businessEventLog.event_id = 'evt-123';
        businessEventLog.event_type = 'ENTITY_ACTION';
        businessEventLog.entity_type = 'PORTFOLIO';
        businessEventLog.entity_id = 'entity-123';
        businessEventLog.action = action;
        businessEventLog.timestamp = new Date();

        expect(businessEventLog.action).toBe(action);
      });
    });

    it('should handle JSON data properly', () => {
      const businessEventLog = new BusinessEventLog();
      const oldValuesData = {
        name: 'Old Portfolio Name',
        description: 'Old Description',
        assets: [
          { symbol: 'AAPL', quantity: 50 },
          { symbol: 'GOOGL', quantity: 25 }
        ],
        metadata: {
          created_by: 'user1',
          risk_level: 'MODERATE'
        }
      };
      const newValuesData = {
        name: 'New Portfolio Name',
        description: 'New Description',
        assets: [
          { symbol: 'AAPL', quantity: 100 },
          { symbol: 'GOOGL', quantity: 50 },
          { symbol: 'MSFT', quantity: 30 }
        ],
        metadata: {
          created_by: 'user1',
          risk_level: 'HIGH',
          updated_by: 'user2'
        }
      };
      const metadataData = {
        source: 'WEB_UI',
        reason: 'Portfolio rebalancing',
        market_conditions: 'VOLATILE',
        user_agent: 'Mozilla/5.0',
        ip_address: '192.168.1.1'
      };

      businessEventLog.old_values = oldValuesData;
      businessEventLog.new_values = newValuesData;
      businessEventLog.metadata = metadataData;

      expect(businessEventLog.old_values).toEqual(oldValuesData);
      expect(businessEventLog.new_values).toEqual(newValuesData);
      expect(businessEventLog.metadata).toEqual(metadataData);
      expect(typeof businessEventLog.old_values).toBe('object');
      expect(typeof businessEventLog.new_values).toBe('object');
      expect(typeof businessEventLog.metadata).toBe('object');
    });

    it('should handle null and undefined optional properties', () => {
      const businessEventLog = new BusinessEventLog();
      businessEventLog.event_id = 'evt-123';
      businessEventLog.event_type = 'PORTFOLIO_CREATED';
      businessEventLog.entity_type = 'PORTFOLIO';
      businessEventLog.entity_id = 'portfolio-123';
      businessEventLog.action = 'CREATE';
      businessEventLog.timestamp = new Date();

      // Optional properties should be undefined by default
      expect(businessEventLog.user_id).toBeUndefined();
      expect(businessEventLog.old_values).toBeUndefined();
      expect(businessEventLog.new_values).toBeUndefined();
      expect(businessEventLog.metadata).toBeUndefined();
    });
  });

  describe('Entity Relationships', () => {
    it('should have optional relationship with Account entity', () => {
      const businessEventLog = new BusinessEventLog();
      const account = new Account();
      account.account_id = 'account-123';
      account.name = 'Test Account';

      businessEventLog.account = account;

      expect(businessEventLog.account).toBe(account);
      expect(businessEventLog.account.account_id).toBe('account-123');
    });

    it('should have optional relationship with Portfolio entity', () => {
      const businessEventLog = new BusinessEventLog();
      const portfolio = new Portfolio();
      portfolio.portfolioId = 'portfolio-123';
      portfolio.name = 'Test Portfolio';

      businessEventLog.portfolio = portfolio;

      expect(businessEventLog.portfolio).toBe(portfolio);
      expect(businessEventLog.portfolio.portfolioId).toBe('portfolio-123');
    });

    it('should have optional relationship with Trade entity', () => {
      const businessEventLog = new BusinessEventLog();
      const trade = new Trade();
      trade.trade_id = 'trade-123';
      trade.side = TradeSide.BUY;

      businessEventLog.trade = trade;

      expect(businessEventLog.trade).toBe(trade);
      expect(businessEventLog.trade.trade_id).toBe('trade-123');
    });
  });

  describe('Entity Timestamps', () => {
    it('should set timestamp when created', () => {
      const businessEventLog = new BusinessEventLog();
      const now = new Date();
      businessEventLog.timestamp = now;

      expect(businessEventLog.timestamp).toBe(now);
    });

    it('should have created_at timestamp set by TypeORM', () => {
      const businessEventLog = new BusinessEventLog();
      // created_at is set by @CreateDateColumn() decorator
      // In real scenario, this would be set by TypeORM
      expect(businessEventLog.created_at).toBeUndefined(); // Initially undefined
    });
  });

  describe('Entity Constraints', () => {
    it('should enforce required fields', () => {
      const businessEventLog = new BusinessEventLog();
      
      // These should be required based on entity definition
      expect(() => {
        // In real scenario, TypeORM would validate these constraints
        businessEventLog.event_id = 'evt-123';
        businessEventLog.event_type = 'PORTFOLIO_CREATED';
        businessEventLog.entity_type = 'PORTFOLIO';
        businessEventLog.entity_id = 'portfolio-123';
        businessEventLog.action = 'CREATE';
        businessEventLog.timestamp = new Date();
      }).not.toThrow();
    });

    it('should handle string length constraints', () => {
      const businessEventLog = new BusinessEventLog();
      
      // Test various string lengths
      businessEventLog.event_type = 'PORTFOLIO_CREATED'; // varchar(100)
      businessEventLog.entity_type = 'PORTFOLIO'; // varchar(100)
      businessEventLog.action = 'CREATE'; // varchar(50)

      expect(businessEventLog.event_type.length).toBeLessThanOrEqual(100);
      expect(businessEventLog.entity_type.length).toBeLessThanOrEqual(100);
      expect(businessEventLog.action.length).toBeLessThanOrEqual(50);
    });
  });

  describe('Unique Constraints', () => {
    it('should enforce unique event_id constraint', () => {
      const businessEventLog1 = new BusinessEventLog();
      businessEventLog1.event_id = 'evt-unique-123';
      businessEventLog1.event_type = 'PORTFOLIO_CREATED';
      businessEventLog1.entity_type = 'PORTFOLIO';
      businessEventLog1.entity_id = 'portfolio-123';
      businessEventLog1.action = 'CREATE';
      businessEventLog1.timestamp = new Date();

      const businessEventLog2 = new BusinessEventLog();
      businessEventLog2.event_id = 'evt-unique-123'; // Same event_id
      businessEventLog2.event_type = 'TRADE_EXECUTED';
      businessEventLog2.entity_type = 'TRADE';
      businessEventLog2.entity_id = 'trade-123';
      businessEventLog2.action = 'EXECUTE';
      businessEventLog2.timestamp = new Date();

      // In real scenario, TypeORM would enforce unique constraint
      expect(businessEventLog1.event_id).toBe(businessEventLog2.event_id);
    });
  });

  describe('Business Event Scenarios', () => {
    it('should handle portfolio creation event', () => {
      const businessEventLog = new BusinessEventLog();
      businessEventLog.event_id = 'evt-portfolio-create-123';
      businessEventLog.event_type = 'PORTFOLIO_CREATED';
      businessEventLog.entity_type = 'PORTFOLIO';
      businessEventLog.entity_id = 'portfolio-123';
      businessEventLog.action = 'CREATE';
      businessEventLog.timestamp = new Date();
      businessEventLog.user_id = 'user-456';
      businessEventLog.new_values = {
        name: 'My Investment Portfolio',
        description: 'Long-term investment strategy',
        base_currency: 'VND',
        risk_level: 'MODERATE'
      };
      businessEventLog.metadata = {
        source: 'WEB_UI',
        ip_address: '192.168.1.1',
        user_agent: 'Mozilla/5.0'
      };

      expect(businessEventLog.event_type).toBe('PORTFOLIO_CREATED');
      expect(businessEventLog.action).toBe('CREATE');
      expect(businessEventLog.new_values.name).toBe('My Investment Portfolio');
    });

    it('should handle trade execution event', () => {
      const businessEventLog = new BusinessEventLog();
      businessEventLog.event_id = 'evt-trade-execute-123';
      businessEventLog.event_type = 'TRADE_EXECUTED';
      businessEventLog.entity_type = 'TRADE';
      businessEventLog.entity_id = 'trade-123';
      businessEventLog.action = 'EXECUTE';
      businessEventLog.timestamp = new Date();
      businessEventLog.user_id = 'user-456';
      businessEventLog.old_values = {
        status: 'PENDING',
        quantity: 0,
        price: 0
      };
      businessEventLog.new_values = {
        status: 'EXECUTED',
        quantity: 100,
        price: 150.50,
        total_value: 15050.00
      };
      businessEventLog.metadata = {
        source: 'API',
        market_conditions: 'NORMAL',
        execution_time_ms: 250
      };

      expect(businessEventLog.event_type).toBe('TRADE_EXECUTED');
      expect(businessEventLog.action).toBe('EXECUTE');
      expect(businessEventLog.old_values.status).toBe('PENDING');
      expect(businessEventLog.new_values.status).toBe('EXECUTED');
    });
  });
});
