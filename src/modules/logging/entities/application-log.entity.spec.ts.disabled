import { Test, TestingModule } from '@nestjs/testing';
import { getRepositoryToken } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import { ApplicationLog } from './application-log.entity';
import { Account } from '../../shared/entities/account.entity';
import { Portfolio } from '../../portfolio/entities/portfolio.entity';
import { Trade, TradeSide } from '../../trading/entities/trade.entity';

describe('ApplicationLog Entity', () => {
  // let repository: Repository<ApplicationLog>;
  let module: TestingModule;

  beforeEach(async () => {
    module = await Test.createTestingModule({
      providers: [
        {
          provide: getRepositoryToken(ApplicationLog),
          useClass: Repository,
        },
      ],
    }).compile();

    // repository = module.get<Repository<ApplicationLog>>(
    //   getRepositoryToken(ApplicationLog),
    // );
  });

  afterEach(async () => {
    await module.close();
  });

  describe('Entity Creation', () => {
    it('should create ApplicationLog entity with all required properties', () => {
      const log = new ApplicationLog();
      log.level = 'error';
      log.message = 'Database connection failed';
      log.service_name = 'portfolio-management';
      log.timestamp = new Date();

      expect(log.level).toBe('error');
      expect(log.message).toBe('Database connection failed');
      expect(log.service_name).toBe('portfolio-management');
      expect(log.timestamp).toBeInstanceOf(Date);
    });

    it('should create ApplicationLog entity with optional properties', () => {
      const log = new ApplicationLog();
      log.level = 'info';
      log.message = 'User logged in successfully';
      log.service_name = 'portfolio-management';
      log.timestamp = new Date();
      log.request_id = 'req-123';
      log.user_id = 'user-456';
      log.module_name = 'authentication';
      log.function_name = 'login';
      log.context = { ip: '192.168.1.1', userAgent: 'Mozilla/5.0' };
      log.error_code = 'LOGIN_SUCCESS';
      log.stack_trace = 'Error stack trace...';

      expect(log.request_id).toBe('req-123');
      expect(log.user_id).toBe('user-456');
      expect(log.module_name).toBe('authentication');
      expect(log.function_name).toBe('login');
      expect(log.context).toEqual({ ip: '192.168.1.1', userAgent: 'Mozilla/5.0' });
      expect(log.error_code).toBe('LOGIN_SUCCESS');
      expect(log.stack_trace).toBe('Error stack trace...');
    });
  });

  describe('Entity Validation', () => {
    it('should accept valid log levels', () => {
      const validLevels = ['error', 'warn', 'info', 'debug', 'critical'];
      
      validLevels.forEach(level => {
        const log = new ApplicationLog();
        log.level = level;
        log.message = 'Test message';
        log.service_name = 'test-service';
        log.timestamp = new Date();

        expect(log.level).toBe(level);
      });
    });

    it('should handle JSON context properly', () => {
      const log = new ApplicationLog();
      const contextData = {
        requestId: 'req-123',
        userId: 'user-456',
        portfolioId: 'portfolio-789',
        metadata: {
          ip: '192.168.1.1',
          userAgent: 'Mozilla/5.0',
          timestamp: new Date().toISOString(),
        },
      };

      log.context = contextData;

      expect(log.context).toEqual(contextData);
      expect(typeof log.context).toBe('object');
    });

    it('should handle null and undefined optional properties', () => {
      const log = new ApplicationLog();
      log.level = 'info';
      log.message = 'Test message';
      log.service_name = 'test-service';
      log.timestamp = new Date();

      // Optional properties should be undefined by default
      expect(log.context).toBeUndefined();
      expect(log.request_id).toBeUndefined();
      expect(log.user_id).toBeUndefined();
      expect(log.module_name).toBeUndefined();
      expect(log.function_name).toBeUndefined();
      expect(log.error_code).toBeUndefined();
      expect(log.stack_trace).toBeUndefined();
    });
  });

  describe('Entity Relationships', () => {
    it('should have optional relationship with Account entity', () => {
      const log = new ApplicationLog();
      const account = new Account();
      account.account_id = 'account-123';
      account.name = 'Test Account';

      log.account = account;

      expect(log.account).toBe(account);
      expect(log.account.account_id).toBe('account-123');
    });

    it('should have optional relationship with Portfolio entity', () => {
      const log = new ApplicationLog();
      const portfolio = new Portfolio();
      portfolio.portfolioId = 'portfolio-123';
      portfolio.name = 'Test Portfolio';

      log.portfolio = portfolio;

      expect(log.portfolio).toBe(portfolio);
      expect(log.portfolio.portfolioId).toBe('portfolio-123');
    });

    it('should have optional relationship with Trade entity', () => {
      const log = new ApplicationLog();
      const trade = new Trade();
      trade.trade_id = 'trade-123';
      trade.side = TradeSide.BUY;

      log.trade = trade;

      expect(log.trade).toBe(trade);
      expect(log.trade.trade_id).toBe('trade-123');
    });
  });

  describe('Entity Timestamps', () => {
    it('should set timestamp when created', () => {
      const log = new ApplicationLog();
      const now = new Date();
      log.timestamp = now;

      expect(log.timestamp).toBe(now);
    });

    it('should have created_at timestamp set by TypeORM', () => {
      const log = new ApplicationLog();
      // created_at is set by @CreateDateColumn() decorator
      // In real scenario, this would be set by TypeORM
      expect(log.created_at).toBeUndefined(); // Initially undefined
    });
  });

  describe('Entity Constraints', () => {
    it('should enforce required fields', () => {
      const log = new ApplicationLog();
      
      // These should be required based on entity definition
      expect(() => {
        // In real scenario, TypeORM would validate these constraints
        log.level = 'error';
        log.message = 'Test message';
        log.service_name = 'test-service';
        log.timestamp = new Date();
      }).not.toThrow();
    });

    it('should handle string length constraints', () => {
      const log = new ApplicationLog();
      
      // Test various string lengths
      log.level = 'error'; // varchar(20)
      log.service_name = 'portfolio-management-service'; // varchar(100)
      log.module_name = 'portfolio'; // varchar(100)
      log.function_name = 'createPortfolio'; // varchar(100)
      log.error_code = 'DB_ERROR'; // varchar(50)

      expect(log.level.length).toBeLessThanOrEqual(20);
      expect(log.service_name.length).toBeLessThanOrEqual(100);
      expect(log.module_name.length).toBeLessThanOrEqual(100);
      expect(log.function_name.length).toBeLessThanOrEqual(100);
      expect(log.error_code.length).toBeLessThanOrEqual(50);
    });
  });
});
