services:
  backend:
    image: ${ECR_REGISTRY}/${ECR_REPOSITORY_BACKEND}:latest
    container_name: portfolio-backend
    restart: always
    env_file:
      - env.example
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - portfolio-network

  frontend:
    image: ${ECR_REGISTRY}/${ECR_REPOSITORY_FRONTEND}:latest
    container_name: portfolio-frontend
    restart: always
    ports:
      - "80:80"
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - portfolio-network

  postgres:
    image: postgres:14-alpine
    container_name: portfolio-postgres
    restart: always
    env_file:
      - env.example
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USERNAME} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - portfolio-network

  redis:
    image: redis:6-alpine
    container_name: portfolio-redis
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - portfolio-network

volumes:
  postgres_data:
  redis_data:

networks:
  portfolio-network:
    driver: bridge
