
services:
  postgres:
    image: postgres:14
    container_name: portfolio_postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: portfolio_db
    ports:
      - "5432:5432" # Cho phép host (npm run start:dev) truy cập DB
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:6-alpine
    container_name: portfolio_redis
    ports:
      - "6379:6379"
    volumes:
      - redisdata:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  app:
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: portfolio_app
    ports:
      - "3000:3000"
    env_file:
      - .env
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/portfolio_db
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USERNAME=postgres
      - DB_PASSWORD=postgres
      - DB_DATABASE=portfolio_db
      - REDIS_URL=redis://redis:6379
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - CACHE_ENABLED=false
      - PORT=3000
      # Logging Configuration
      - LOG_LEVEL=info
      - LOG_FORMAT=json
      - LOG_CONSOLE_ENABLED=true
      - LOG_FILE_ENABLED=true
      - LOG_FILE_PATH=/app/logs/application.log
      - LOG_MAX_FILE_SIZE=10485760
      - LOG_MAX_FILES=5
      - LOG_DATABASE_ENABLED=true
      - LOG_RETENTION_DAYS=30
      - LOG_CLEANUP_ENABLED=true
      - LOG_CLEANUP_SCHEDULE=0 2 * * *
      - LOG_PERFORMANCE_ENABLED=true
      - LOG_PERFORMANCE_THRESHOLD=1000
      - LOG_SECURITY_ENABLED=true
      - LOG_REQUEST_ENABLED=true
      - LOG_BUSINESS_EVENTS_ENABLED=true
      - PRICE_UPDATE_INTERVAL_MINUTES=120
      - AUTO_SYNC_ENABLED=false
      # Risk Metrics Configuration
      - RISK_FREE_RATE=${RISK_FREE_RATE:-0.05}
      - TRADING_DAYS_PER_YEAR=${TRADING_DAYS_PER_YEAR:-252}
      - MIN_RISK_DATA_POINTS=${MIN_RISK_DATA_POINTS:-2}
    volumes:
      - .:/app
      - /app/node_modules
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: npm run start:dev
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: portfolio_frontend
    ports:
      - "3001:3001"
    environment:
      - REACT_APP_API_URL=http://localhost:3000
      - REACT_APP_WS_URL=http://localhost:3000
      - REACT_APP_ENV=development
      - CHOKIDAR_USEPOLLING=true
    volumes:
      - ./frontend/src:/app/src
      - ./frontend/public:/app/public
      - ./frontend/index.html:/app/index.html
      - ./frontend/vite.config.ts:/app/vite.config.ts
      - ./frontend/tsconfig.json:/app/tsconfig.json
      - ./frontend/tsconfig.node.json:/app/tsconfig.node.json
    depends_on:
      - app
    command: npm run dev -- --host 0.0.0.0 --port 3001

  # ELK Stack for Log Aggregation and Monitoring
  elasticsearch:
    image: elasticsearch:8.11.0
    container_name: portfolio_elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  logstash:
    image: logstash:8.11.0
    container_name: portfolio_logstash
    ports:
      - "5044:5044"
      - "9600:9600"
    volumes:
      - ./logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml
      - ./logstash/pipeline:/usr/share/logstash/pipeline
      - ./logs:/usr/share/logstash/logs
    environment:
      - LS_JAVA_OPTS=-Xmx256m -Xms256m
    depends_on:
      elasticsearch:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9600/_node/stats || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  kibana:
    image: kibana:8.11.0
    container_name: portfolio_kibana
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - ELASTICSEARCH_USERNAME=kibana_system
      - ELASTICSEARCH_PASSWORD=kibana
    depends_on:
      elasticsearch:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5601/api/status || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Log Monitoring and Alerting
  prometheus:
    image: prom/prometheus:latest
    container_name: portfolio_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  grafana:
    image: grafana/grafana:latest
    container_name: portfolio_grafana
    ports:
      - "3002:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/var/lib/grafana/dashboards
    depends_on:
      - prometheus

volumes:
  pgdata:
  redisdata:
  elasticsearch_data:
  prometheus_data:
  grafana_data:
